/*
 * Jitsi, the OpenSource Java VoIP and Instant Messaging client.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package net.java.sip.communicator.service.protocol.event

import net.java.sip.communicator.service.protocol.Contact
import net.java.sip.communicator.service.protocol.ContactGroup
import net.java.sip.communicator.service.protocol.ProtocolProviderService
import java.util.*

/**
 * Events of this class represent the fact that a server stored subscription/contact has been moved
 * from one server stored group to another. Such events are only generated by implementations of
 * OperationSetPersistentPresence as non persistent presence operation sets do not support the
 * notion of server stored groups.
 *
 * @author Emil Ivov
 */
class SubscriptionMovedEvent(sourceContact: Contact?, sourceProvider: ProtocolProviderService?,
        oldParent: ContactGroup?, newParent: ContactGroup?) : EventObject(sourceContact) {
    private var oldParent: ContactGroup? = null
    private var newParent: ContactGroup? = null
    private var sourceProvider: ProtocolProviderService? = null

    /**
     * Creates an event instance with the specified source contact and old and new parent.
     *
     * @param sourceContact
     * the `Contact` that has been moved.
     * @param sourceProvider
     * a reference to the `ProtocolProviderService` that the source `Contact`
     * belongs to.
     * @param oldParent
     * the `ContactGroup` that has previously been the parent
     * @param newParent
     * the new `ContactGroup` parent of `sourceContact`
     */
    init {
        this.oldParent = oldParent
        this.newParent = newParent
        this.sourceProvider = sourceProvider
    }

    /**
     * Returns a reference to the contact that has been moved.
     *
     * @return a reference to the `Contact` that has been moved.
     */
    fun getSourceContact(): Contact {
        return getSource() as Contact
    }

    /**
     * Returns a reference to the ContactGroup that contained the source contact before it was
     * moved.
     *
     * @return a reference to the previous `ContactGroup` parent of the source
     * `Contact`.
     */
    fun getOldParentGroup(): ContactGroup? {
        return oldParent
    }

    /**
     * Returns a reference to the ContactGroup that currently contains the source contact.
     *
     * @return a reference to the current `ContactGroup` parent of the source
     * `Contact`.
     */
    fun getNewParentGroup(): ContactGroup? {
        return newParent
    }

    /**
     * Returns the provider that the source contact belongs to.
     *
     * @return the provider that the source contact belongs to.
     */
    fun getSourceProvider(): ProtocolProviderService? {
        return sourceProvider
    }

    /**
     * Returns a String representation of this ContactPresenceStatusChangeEvent
     *
     * @return A a String representation of this SubscriptionMovedEvent.
     */
    override fun toString(): String {
        val buff = StringBuffer("SubscriptionMovedEvent-[ ContactID=")
        buff.append(getSourceContact().address)
        buff.append(", OldParentGroup=").append(getOldParentGroup()!!.getGroupName())
        buff.append(", NewParentGroup=").append(getNewParentGroup()!!.getGroupName())
        return buff.toString()
    }

    companion object {
        /**
         * Serial version UID.
         */
        private const val serialVersionUID = 0L
    }
}